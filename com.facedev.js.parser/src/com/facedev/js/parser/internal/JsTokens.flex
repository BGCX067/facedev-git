package com.facedev.js.parser.internal;

import com.facedev.js.parser.JsParseException;
import com.facedev.js.parser.JsKeywords;


@SuppressWarnings("unused")

/**
 * This class is a scanner generated by JFlex.
 * Provides fast DFA-based scanner for javascript source.
 */
%%
%final
%class JsTokenizer
%apiprivate
%scanerror JsParseException
%unicode
%line
%column
%function nextToken
%type JsFlexToken

%{
  JsFlexToken next() throws java.io.IOException, JsParseException {
    return nextToken();
  }
%}

/* ECMA 7.2: white spaces definition */
LineTerminator                = [\r\n\u2028\u2029]
LineTerminatorSequence        = \r\n | {LineTerminator}
WhiteSpace                    = [\u0009\u000B\u000C\u0020\u00A0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]
WhiteSpaceBlock               = {WhiteSpace}+


/* ECMA 7.4: comments */
Comment                       = {MultiLineComment} | {SingleLineComment}

MultiLineComment              = "/*" {MultiLineCommentChars} "*/"
MultiLineCommentChars         = ({MultiLineNotAsteriskChar}|("*"{PostAsteriskCommentChar}))*
PostAsteriskCommentChar       = [^\/]
MultiLineNotAsteriskChar      = [^\*]

SingleLineComment             = "//" {SingleLineCommentChars}
SingleLineCommentChars        = (!{LineTerminator})*

/* ECMA 7.4: tokens */
/*Token                         = {IdentifierName} | {Punctuator} | {NumericLiteral} | {StringLiteral}*/

/* ECMA 7.5 identifiers & identifiers names */
IdentifierName                = {IdentifierStart}{IdentifierPart}*
IdentifierStart               = [:letter:]|[\$_]|("\\"{UnicodeEscapeSequence})
IdentifierPart                = {IdentifierStart}|{OtherIdentifierPart}
/* precompiled {UnicodeCombiningMark} | {UnicodeDigit} | {UnicodeConnectorPunctuation} | <ZWNJ> | <ZWJ> */
OtherIdentifierPart           = [\u0030-\u0039\u005f\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a] |
                                [\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a] |
                                [\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b] |
                                [\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983] |
                                [\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42] |
                                [\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd] |
                                [\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63] |
                                [\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44] |
                                [\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8] |
                                [\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d] |
                                [\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a] |
                                [\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29] |
                                [\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049] |
                                [\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f] |
                                [\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819] |
                                [\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e] |
                                [\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82] |
                                [\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8] |
                                [\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0] |
                                [\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0] |
                                [\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909] |
                                [\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59] |
                                [\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed] |
                                [\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f]
                                
/* ECMA 7.6.1 - reserved worlds */
/*ReservedWord                  = {Keyword} | {FutureReservedWord} | {NullLiteral} | {BooleanLiteral}*/

Keyword                       = "break" | "do" | "instanceof" | "typeof" | "case" | "else" | "new" | "var" | "catch" | "finally" | 
                                "void" | "continue" | "for" | "switch" | "while" | "debugger" | "function" | "this" | "with" |  
                                "if" | "throw" | "delete" | "in" | "default" | "return" | "try"
                                
FutureReservedWord            = "class" | "enum" | "extends" | "super" | "const" | "export" | "import"

FutureReservedWordStrict      = "implements" | "let" | "private" | "public" | "yield" | "interface" | "package" | "protected" | "static"

Punctuator                    = "{" | "}" | "(" | ")" | "[" | "]" | "." | ";" | "," | "<" | ">" | "<=" | ">=" | 
                                "==" | "!=" | "===" | "!==" | "+" | "-" | "*" | "%" | "++" | "--" | "<<" | 
                                ">>" | ">>>" | "&" | "|" | "^" | "!" | "~" | "&&" | "||" | "?" | ":" | "=" | 
                                "+=" | "-=" | "*=" | "%=" | "<<=" | ">>=" | ">>>=" | "&=" | "|=" | "^="
                                 
DivPunctuator                 = "/" | "/="

/*ECMA 7.8 literals */
/*Literal                       = {NullLiteral} | {BooleanLiteral} | {NumbericLiteral} | {StringLiteral} | {RegularExpressionLiteral}*/
                                
NullLiteral                   = "null"

BooleanLiteral                = "true" | "false"

/*ECMA 7.8.3 numeric literals */
NumbericLiteral               = {DecimalLiteral} | {HexIntegerLiteral}

DecimalLiteral                = ({DecimalIntegerLiteral} "." {DecimalDigits}? {ExponentPart}?)|
                                ("." {DecimalDigits} {ExponentPart}?)|
                                ({DecimalIntegerLiteral} {ExponentPart}?)
                                
DecimalIntegerLiteral         = 0 | ({NonZeroDigit} {DecimalDigits}?)
DecimalDigits                 = {DecimalDigit}+
DecimalDigit                  = [0-9]
NonZeroDigit                  = [1-9]

ExponentPart                  = {ExponentIndicator}{SignedInteger}
ExponentIndicator             = [eE]
SignedInteger                 = ({DecimalDigits}) |
                                ("+" {DecimalDigits}) | 
                                ("-" {DecimalDigits})
                                
HexIntegerLiteral             = ("0x"|0X) {HexDigit}+
HexDigit                      = [0-9a-fA-F]

/* ECMA 7.8.4 String Literals */
StringLiteral                 = ("\"" {DoubleStringCharacters}? "\"") |
                                ("'" {SingleStringCharacters}? "'")
DoubleStringCharacters        = {DoubleStringCharacter}+
DoubleStringCharacter         = (!([\"\\]|{LineTerminator})) |
                                ("\\" {EscapeSequence}) |
                                {LineContinuation}

SingleStringCharacters        = {SingleStringCharacter}+
SingleStringCharacter         = (!([\'\\]|{LineTerminator})) |
                                ("\\" {EscapeSequence}) |
                                ("\\0") |
                                {LineContinuation}

LineContinuation              = "\\" {LineTerminatorSequence}
EscapeSequence                = {CharacterEscapeSequence} |
                                {HexEscapeSequence} |
                                {UnicodeEscapeSequence}
                                
CharacterEscapeSequence       = {SingleEscapeCharacter} | {NonEscapeCharacter}
SingleEscapeCharacter         = [\'\"\\bfnrtv]
NonEscapeCharacter            = !({EscapeCharacter}|{LineTerminator})
EscapeCharacter               = {SingleEscapeCharacter} | {DecimalDigit} | [xu]
HexEscapeSequence             = "x" {HexDigit} {HexDigit}
UnicodeEscapeSequence         = "u" {HexDigit} {HexDigit} {HexDigit} {HexDigit}

/* ECMA 7.8.5 Regular Expression Literals */
RegularExpressionLiteral      = "/" {RegularExpressionBody} "/" {RegularExpressionFlags}
RegularExpressionBody         = {RegularExpressionFirstChar} {RegularExpressionChars}
RegularExpressionChars        = {RegularExpressionChar}*
RegularExpressionFirstChar    = (!(!{RegularExpressionNonTerm}|[\*\\\/\[])) |
                                {RegularExpressionBSlashSeq} |
                                {RegularExpressionClass}
                                
RegularExpressionChar         = (!(!{RegularExpressionNonTerm}|[\\\/\[])) |
                                {RegularExpressionBSlashSeq} |
                                {RegularExpressionClass}
                                
RegularExpressionBSlashSeq    = "\\" {RegularExpressionNonTerm}

RegularExpressionNonTerm      = !{LineTerminator}

RegularExpressionClass        = "[" {RegularExpressionClassChars} "]"

RegularExpressionClassChars   = {RegularExpressionClassChar}*

RegularExpressionClassChar    = (!(!{RegularExpressionNonTerm}|[\\\[])) | {RegularExpressionBSlashSeq}

RegularExpressionFlags        = {IdentifierPart}

%%

<YYINITIAL> {

{LineTerminatorSequence}      { return new JsFlexToken(JsFlexToken.TOKEN_LINE_TERMINATOR, JsFlexToken.LINE_TERMINATOR, yyline, yycolumn); }

{WhiteSpaceBlock}             { return new JsFlexToken(JsFlexToken.TOKEN_WHITE_SPACE, JsFlexToken.WHITE_SPACE, yyline, yycolumn); }

{Comment}                     { return new JsFlexToken(yytext(), JsFlexToken.COMMENT, yyline, yycolumn); }

{Keyword}                     { return new JsFlexToken(yytext().intern(), JsFlexToken.RESERVED | JsFlexToken.RESERVED_KEYWORD, yyline, yycolumn); }

{FutureReservedWordStrict}    { return new JsFlexToken(yytext().intern(), JsFlexToken.RESERVED | JsFlexToken.FUTURE_RESERVED_STRICT, yyline, yycolumn); }

{FutureReservedWord}          { return new JsFlexToken(yytext().intern(), JsFlexToken.RESERVED | JsFlexToken.FUTURE_RESERVED, yyline, yycolumn); }

{Punctuator}                  { return new JsFlexToken(yytext().intern(), JsFlexToken.PUNKTUATOR | JsFlexToken.ANY_PUNKTUATOR, yyline, yycolumn); }

{DivPunctuator}               { return new JsFlexToken(yytext().intern(), JsFlexToken.DIV_PUNKTUATOR | JsFlexToken.ANY_PUNKTUATOR, yyline, yycolumn); }

{NullLiteral}                 { return new JsFlexToken(yytext().intern(), JsFlexToken.RESERVED | JsFlexToken.RESERVED_KEYWORD | 
                                                                          JsFlexToken.LITERAL | JsFlexToken.NULL_LITERAL, yyline, yycolumn); }
                                                                          
{BooleanLiteral}              { return new JsFlexToken(yytext().intern(), JsFlexToken.RESERVED | JsFlexToken.RESERVED_KEYWORD |
                                                                          JsFlexToken.LITERAL | JsFlexToken.BOOLEAN_LITERAL, yyline, yycolumn); }
                                                                          
{NumbericLiteral}             { return new JsFlexToken(yytext(), JsFlexToken.LITERAL | JsFlexToken.NUMERIC_LITERAL, yyline, yycolumn); }

{StringLiteral}               { return new JsFlexToken(yytext(), JsFlexToken.LITERAL | JsFlexToken.STRING_LITERAL, yyline, yycolumn); }
{RegularExpressionLiteral}    { return new JsFlexToken(yytext(), JsFlexToken.LITERAL | JsFlexToken.REGEXP_LITERAL, yyline, yycolumn); }

{IdentifierName}              { return new JsFlexToken(yytext(), JsFlexToken.IDENTIFIER, yyline, yycolumn); }
}

.|\n  {
  /*Error fallback: matches any input*/
  return new JsFlexToken(yytext(), JsFlexToken.ERROR, yyline, yycolumn);
}