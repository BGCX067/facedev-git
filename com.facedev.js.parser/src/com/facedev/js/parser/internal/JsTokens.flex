package com.facedev.js.parser.internal;

import com.facedev.js.parser.JsParseException;
import com.facedev.js.parser.JsKeywords;


@SuppressWarnings("unused")

/**
 * This class is a scanner generated by JFlex.
 * Provides fast DFA-based scanner for javascript source.
 */
%%
%final
%class JsTokenizer
%apiprivate
%scanerror JsParseException
%unicode
%line
%column
%function next
%type JsFlexToken

%{

  private StringBuilder token = new StringBuilder();

%}

LineTerminator = \r|\n|\r\n
InputCharacter = [^\r\n]
WhiteSpace     = {LineTerminator} | [ \t\f]


/* comments */
Comment = {TraditionalComment} | {EndOfLineComment} | {DocumentationComment}

TraditionalComment   = "/*" [^*] ~"*/" | "/*" "*"+ "/"
EndOfLineComment     = "//" {InputCharacter}* {LineTerminator}
DocumentationComment = "/**" {CommentContent} "*"+ "/"
CommentContent       = ( [^*] | \*+ [^/*] )*

Identifier = [:jletter:] [:jletterdigit:]*

DecIntegerLiteral = 0 | [1-9][0-9]*
%state STRING

%%
 /* keywords */
<YYINITIAL> "abstract"           { return new JsFlexToken(JsKeywords.KEYWORD_ABSTRACT, 0); }
<YYINITIAL> "boolean"            { return new JsFlexToken(JsKeywords.KEYWORD_BOOLEAN, 0); }
<YYINITIAL> "break"              { return new JsFlexToken(JsKeywords.KEYWORD_BREAK, 0); }
<YYINITIAL> {
  /* identifiers */ 
  {Identifier}                   { return new JsFlexToken("identifier", 0); }
 
  /* literals */
  {DecIntegerLiteral}            { return new JsFlexToken("digit", 0); }
  \"                             { token.setLength(0); yybegin(STRING); }

  /* operators */
  "="                            { return new JsFlexToken("=", 0);  }
  "=="                           { return new JsFlexToken("==", 0);  }
  "+"                            { return new JsFlexToken("+", 0);  }

  /* comments */
  {Comment}                      { /* ignore */ }
 
  /* whitespace */
  {WhiteSpace}                   { /* ignore */ }
}
<STRING> {
  \"                             { yybegin(YYINITIAL); 
                                   return new JsFlexToken(token.toString(), 0); }
  [^\n\r\"\\]+                   { token.append( yytext() ); }
  \\t                            { token.append('\t'); }
  \\n                            { token.append('\n'); }

  \\r                            { token.append('\r'); }
  \\\"                           { token.append('\"'); }
  \\                             { token.append('\\'); }
}
/* error fallback */
.|\n                             { throw new JsParseException("Illegal character <"+
                                                    yytext()+">"); }