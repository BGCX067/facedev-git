/* The following code was generated by JFlex 1.4.3 on 4/9/13 12:18 AM */

package com.facedev.js.parser.internal;

import com.facedev.js.parser.JsParseException;
import com.facedev.js.parser.JsKeywords;


@SuppressWarnings("unused")

/**
 * This class is a scanner generated by JFlex.
 * Provides fast DFA-based scanner for javascript source.
 */

final class JsTokenizer {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int DIV_ONLY = 2;
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\3\2\4\1\2\22\0\1\4\1\47\1\64\1\0"+
    "\1\7\1\52\1\53\1\65\1\41\1\55\1\6\1\50\1\41\1\51"+
    "\1\43\1\5\1\57\11\60\1\41\1\41\1\44\1\46\1\45\1\41"+
    "\1\0\4\63\1\61\1\63\21\7\1\62\2\7\1\42\1\10\1\56"+
    "\1\52\1\7\1\0\1\15\1\12\1\25\1\17\1\14\1\26\1\36"+
    "\1\34\1\21\1\7\1\16\1\31\1\37\1\22\1\20\1\30\1\7"+
    "\1\13\1\23\1\24\1\35\1\33\1\32\1\40\1\27\1\7\1\41"+
    "\1\54\1\41\1\41\41\0\1\4\11\0\1\7\12\0\1\7\4\0"+
    "\1\7\5\0\27\7\1\0\37\7\1\0\u013f\7\31\0\162\7\4\0"+
    "\14\7\16\0\5\7\11\0\1\7\21\0\160\11\12\0\1\7\13\0"+
    "\1\7\1\0\3\7\1\0\1\7\1\0\24\7\1\0\54\7\1\0"+
    "\46\7\1\0\5\7\4\0\202\7\1\0\5\11\2\0\105\7\1\0"+
    "\46\7\2\0\2\7\6\0\20\7\41\0\46\7\2\0\1\7\7\0"+
    "\47\7\11\0\55\11\1\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\1\11\10\0\33\7\5\0\3\7\35\0\13\11\6\0\32\7\5\0"+
    "\13\7\37\11\4\0\2\7\1\11\143\7\1\0\1\7\7\11\2\0"+
    "\6\11\2\7\2\11\1\0\4\11\2\7\12\11\3\7\2\0\1\7"+
    "\20\0\1\7\1\11\36\7\33\11\2\0\3\7\60\0\46\7\13\11"+
    "\1\7\16\0\12\11\41\0\11\11\42\0\4\11\1\0\11\11\1\0"+
    "\3\11\1\0\5\11\53\0\3\11\210\0\33\11\1\0\4\11\66\7"+
    "\3\11\1\7\22\11\1\7\7\11\12\7\2\11\2\0\12\11\21\0"+
    "\3\11\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0"+
    "\1\7\3\0\4\7\2\0\1\11\1\7\7\11\2\0\2\11\2\0"+
    "\3\11\11\0\1\11\4\0\2\7\1\0\3\7\2\11\2\0\12\11"+
    "\2\7\17\0\3\11\1\0\6\7\4\0\2\7\2\0\26\7\1\0"+
    "\7\7\1\0\2\7\1\0\2\7\1\0\2\7\2\0\1\11\1\0"+
    "\5\11\4\0\2\11\2\0\3\11\3\0\1\11\7\0\4\7\1\0"+
    "\1\7\7\0\14\11\3\7\1\11\13\0\3\11\1\0\11\7\1\0"+
    "\3\7\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0"+
    "\1\11\1\7\10\11\1\0\3\11\1\0\3\11\2\0\1\7\17\0"+
    "\2\7\2\11\2\0\12\11\21\0\3\11\1\0\10\7\2\0\2\7"+
    "\2\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\11"+
    "\1\7\7\11\2\0\2\11\2\0\3\11\10\0\2\11\4\0\2\7"+
    "\1\0\3\7\2\11\2\0\12\11\1\0\1\7\20\0\1\11\1\7"+
    "\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\3\0\3\7\3\0\10\7\1\0\3\7"+
    "\4\0\5\11\3\0\3\11\1\0\4\11\11\0\1\11\16\0\12\11"+
    "\21\0\3\11\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7"+
    "\1\0\5\7\4\0\7\11\1\0\3\11\1\0\4\11\7\0\2\11"+
    "\11\0\2\7\2\11\2\0\12\11\22\0\2\11\1\0\10\7\1\0"+
    "\3\7\1\0\27\7\1\0\12\7\1\0\5\7\2\0\1\11\1\7"+
    "\7\11\1\0\3\11\1\0\4\11\7\0\2\11\7\0\1\7\1\0"+
    "\2\7\2\11\2\0\12\11\22\0\2\11\1\0\10\7\1\0\3\7"+
    "\1\0\27\7\1\0\20\7\4\0\7\11\1\0\3\11\1\0\4\11"+
    "\11\0\1\11\10\0\2\7\2\11\2\0\12\11\22\0\2\11\1\0"+
    "\22\7\3\0\30\7\1\0\11\7\1\0\1\7\2\0\7\7\3\0"+
    "\1\11\4\0\6\11\1\0\1\11\1\0\10\11\22\0\2\11\15\0"+
    "\60\7\1\11\2\7\7\11\5\0\7\7\10\11\1\0\12\11\47\0"+
    "\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0"+
    "\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0"+
    "\2\7\1\0\4\7\1\11\2\7\6\11\1\0\2\11\1\7\2\0"+
    "\5\7\1\0\1\7\1\0\6\11\2\0\12\11\2\0\2\7\42\0"+
    "\1\7\27\0\2\11\6\0\12\11\13\0\1\11\1\0\1\11\1\0"+
    "\1\11\4\0\2\11\10\7\1\0\42\7\6\0\24\11\1\0\2\11"+
    "\4\7\1\0\13\11\1\0\44\11\11\0\1\11\71\0\42\7\1\0"+
    "\5\7\1\0\2\7\24\11\1\0\12\11\6\0\6\7\4\11\4\0"+
    "\3\11\1\0\3\11\2\0\7\11\3\0\4\11\15\0\14\11\1\0"+
    "\17\11\2\0\46\7\12\0\51\7\7\0\132\7\5\0\104\7\5\0"+
    "\122\7\6\0\7\7\1\0\77\7\1\0\1\7\1\0\4\7\2\0"+
    "\7\7\1\0\1\7\1\0\4\7\2\0\47\7\1\0\1\7\1\0"+
    "\4\7\2\0\37\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0"+
    "\1\7\1\0\4\7\2\0\7\7\1\0\7\7\1\0\27\7\1\0"+
    "\37\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0\47\7\1\0"+
    "\23\7\2\0\3\11\100\0\125\7\14\0\u026c\7\2\0\10\7\11\0"+
    "\1\4\32\7\5\0\113\7\25\0\15\7\1\0\4\7\3\11\13\0"+
    "\22\7\3\11\13\0\22\7\2\11\14\0\15\7\1\0\3\7\1\0"+
    "\2\11\14\0\64\7\40\11\3\0\1\7\4\0\1\7\1\11\2\0"+
    "\12\11\41\0\3\11\1\4\1\0\12\11\6\0\130\7\10\0\51\7"+
    "\1\11\126\0\35\7\3\0\14\11\4\0\14\11\12\0\12\11\36\7"+
    "\2\0\5\7\73\0\21\11\7\0\2\11\6\0\12\11\75\0\5\11"+
    "\71\0\12\11\1\0\35\11\2\0\13\11\6\0\12\11\146\0\5\11"+
    "\57\0\21\11\13\0\12\11\21\0\11\11\14\0\3\11\36\0\15\11"+
    "\2\0\12\11\54\0\16\11\60\0\24\11\10\0\12\11\6\0\12\11"+
    "\166\0\3\11\1\0\25\11\4\0\1\11\4\0\3\11\13\0\154\7"+
    "\124\0\47\11\25\0\4\11\234\7\4\0\132\7\6\0\26\7\2\0"+
    "\6\7\2\0\46\7\2\0\6\7\2\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\37\7\2\0\65\7\1\0\7\7\1\0"+
    "\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0"+
    "\15\7\5\0\3\7\1\0\7\7\3\0\13\4\1\0\2\11\32\0"+
    "\2\1\5\0\1\4\17\0\2\11\23\0\1\11\12\0\1\4\21\0"+
    "\1\7\15\0\1\7\120\0\15\11\4\0\1\11\3\0\14\11\21\0"+
    "\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0\3\7\1\0"+
    "\7\7\3\0\3\7\5\0\5\7\u0ba5\0\3\11\215\0\1\11\140\0"+
    "\40\11\u0200\0\1\4\4\0\2\7\43\0\6\11\1\0\5\7\5\0"+
    "\2\7\4\0\126\7\2\0\2\11\2\0\3\7\1\0\132\7\1\0"+
    "\4\7\5\0\50\7\4\0\136\7\21\0\30\7\70\0\20\7\u0200\0"+
    "\u19b6\7\112\0\u51a6\7\132\0\u048d\7\u0193\0\12\11\105\0\1\11\4\0"+
    "\12\11\41\0\1\11\120\0\1\11\1\11\u0110\0\1\11\3\0\1\11"+
    "\4\0\1\11\27\0\5\11\130\0\2\11\62\0\21\11\13\0\12\11"+
    "\6\0\22\11\16\0\12\11\34\0\10\11\31\0\15\11\54\0\4\11"+
    "\57\0\16\11\17\0\12\11\117\0\16\11\14\0\1\11\10\0\2\11"+
    "\2\0\12\11\41\0\1\11\64\0\1\11\1\0\3\11\2\0\2\11"+
    "\5\0\2\11\1\0\1\11\51\0\5\11\5\0\2\11\354\0\10\11"+
    "\1\0\2\11\2\0\12\11\6\0\u2ba4\7\u215c\0\u012e\7\2\0\73\7"+
    "\225\0\7\7\14\0\5\7\5\0\1\7\1\11\12\7\1\0\15\7"+
    "\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\154\7"+
    "\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0\14\7\4\0\20\11"+
    "\20\0\7\11\14\0\2\11\30\0\3\11\40\0\5\7\1\0\207\7"+
    "\2\0\1\4\20\0\12\11\7\0\32\7\4\0\1\11\1\0\32\7"+
    "\13\0\131\7\3\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\1"+
    "\17\6\11\5\1\7\2\10\2\1\1\4\1\11\2\0"+
    "\1\4\2\0\6\6\2\12\30\6\1\10\1\5\4\0"+
    "\1\13\2\0\1\13\5\0\37\6\1\14\3\6\1\0"+
    "\2\10\2\13\1\11\1\15\3\0\2\6\1\16\10\6"+
    "\1\17\2\6\1\20\12\6\1\0\1\15\2\0\17\6"+
    "\2\0\12\6\2\0\3\6\2\0\1\6\2\0\1\6"+
    "\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\154\0\242\0\330\0\u010e\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\154\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e"+
    "\0\u0654\0\u068a\0\154\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798"+
    "\0\u07ce\0\u0804\0\u083a\0\154\0\u01b0\0\u0870\0\u08a6\0\u08dc"+
    "\0\u0912\0\u0948\0\u097e\0\u09b4\0\u017a\0\u09ea\0\u0a20\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06"+
    "\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6"+
    "\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u103e\0\u1074\0\u10aa\0\u10aa"+
    "\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a"+
    "\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a"+
    "\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba"+
    "\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a"+
    "\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u017a\0\u1878\0\u18ae\0\u18e4"+
    "\0\u191a\0\u191a\0\u0fd2\0\u1008\0\u1074\0\154\0\u1950\0\u1986"+
    "\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u017a\0\u1a94\0\u1aca\0\u1b00"+
    "\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u017a\0\u1c44\0\u1c7a"+
    "\0\u017a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4"+
    "\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4"+
    "\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154"+
    "\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304"+
    "\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4"+
    "\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664"+
    "\0\u269a\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\7\1\10\1\11"+
    "\1\12\1\3\1\13\1\14\1\15\2\11\1\16\1\11"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\5\11\2\32\1\33\1\34\1\35"+
    "\2\36\1\37\1\40\1\10\1\41\1\42\2\43\1\44"+
    "\1\45\3\11\1\46\1\47\1\3\1\4\1\5\1\4"+
    "\1\6\1\50\1\10\1\11\1\12\1\3\1\13\1\14"+
    "\1\15\2\11\1\16\1\11\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\5\11"+
    "\2\32\1\33\1\34\1\35\2\36\1\37\1\40\1\10"+
    "\1\41\1\42\2\43\1\44\1\45\3\11\1\46\1\47"+
    "\71\0\1\4\66\0\1\6\66\0\1\51\1\52\6\0"+
    "\1\53\30\0\1\54\65\0\1\32\26\0\1\11\1\55"+
    "\30\11\16\0\5\11\37\0\1\56\37\0\1\11\1\55"+
    "\2\11\1\57\25\11\16\0\5\11\11\0\1\11\1\55"+
    "\3\11\1\60\24\11\16\0\5\11\11\0\1\11\1\55"+
    "\11\11\1\61\6\11\1\62\6\11\1\63\16\0\5\11"+
    "\11\0\1\11\1\55\3\11\1\64\3\11\1\65\20\11"+
    "\16\0\5\11\11\0\1\11\1\55\11\11\1\66\3\11"+
    "\1\65\10\11\1\67\1\11\16\0\5\11\11\0\1\11"+
    "\1\55\3\11\1\70\20\11\1\71\3\11\16\0\5\11"+
    "\11\0\1\11\1\55\13\11\1\72\5\11\1\73\2\11"+
    "\1\74\3\11\16\0\5\11\11\0\1\11\1\55\2\11"+
    "\1\75\13\11\1\76\4\11\1\77\4\11\16\0\5\11"+
    "\11\0\1\11\1\55\4\11\1\100\2\11\1\101\10\11"+
    "\1\102\7\11\16\0\5\11\11\0\1\11\1\55\4\11"+
    "\1\103\2\11\1\104\1\105\13\11\1\106\3\11\16\0"+
    "\5\11\11\0\1\11\1\55\10\11\1\107\17\11\16\0"+
    "\5\11\11\0\1\11\1\55\2\11\1\110\1\11\1\111"+
    "\17\11\1\112\3\11\16\0\5\11\11\0\1\11\1\55"+
    "\3\11\1\113\24\11\16\0\5\11\11\0\1\11\1\55"+
    "\10\11\1\114\12\11\1\115\4\11\16\0\5\11\11\0"+
    "\1\11\1\55\4\11\1\104\2\11\1\116\20\11\16\0"+
    "\5\11\61\0\2\117\51\0\1\10\1\0\1\32\64\0"+
    "\1\120\1\32\65\0\1\10\65\0\1\32\1\0\1\32"+
    "\63\0\1\32\2\0\1\32\62\0\1\32\4\0\1\32"+
    "\60\0\1\32\5\0\1\32\25\0\1\121\23\0\1\122"+
    "\2\0\1\117\15\0\1\121\1\122\17\0\1\121\26\0"+
    "\1\117\13\0\2\45\1\121\4\0\1\123\3\124\60\123"+
    "\1\125\1\123\1\126\3\127\61\126\1\130\5\0\1\51"+
    "\1\52\37\0\1\54\17\0\1\51\3\0\62\51\6\52"+
    "\1\131\57\52\1\132\3\0\1\132\2\0\1\132\1\133"+
    "\31\132\1\134\23\132\12\0\1\135\1\0\2\135\1\0"+
    "\1\135\5\0\2\135\30\0\3\135\1\0\1\135\11\0"+
    "\1\11\1\55\3\11\1\136\24\11\16\0\5\11\11\0"+
    "\1\11\1\55\13\11\1\137\14\11\16\0\5\11\11\0"+
    "\1\11\1\55\24\11\1\140\3\11\16\0\5\11\11\0"+
    "\1\11\1\55\12\11\1\141\15\11\16\0\5\11\11\0"+
    "\1\11\1\55\13\11\1\142\3\11\1\143\10\11\16\0"+
    "\5\11\11\0\1\11\1\55\1\11\1\144\13\11\1\145"+
    "\2\11\1\146\7\11\16\0\5\11\11\0\1\11\1\55"+
    "\12\11\1\147\1\150\14\11\16\0\5\11\11\0\1\11"+
    "\1\55\17\11\1\151\10\11\16\0\5\11\11\0\1\11"+
    "\1\55\21\11\1\65\6\11\16\0\5\11\11\0\1\11"+
    "\1\55\20\11\1\152\7\11\16\0\5\11\11\0\1\11"+
    "\1\55\4\11\1\153\23\11\16\0\5\11\11\0\1\11"+
    "\1\55\10\11\1\154\17\11\16\0\5\11\11\0\1\11"+
    "\1\55\17\11\1\155\10\11\16\0\5\11\11\0\1\11"+
    "\1\55\16\11\1\65\5\11\1\156\3\11\16\0\5\11"+
    "\11\0\1\11\1\55\17\11\1\157\10\11\16\0\5\11"+
    "\11\0\1\11\1\55\2\11\1\160\5\11\1\161\17\11"+
    "\16\0\5\11\11\0\1\11\1\55\12\11\1\141\1\162"+
    "\14\11\16\0\5\11\11\0\1\11\1\55\11\11\1\163"+
    "\16\11\16\0\5\11\11\0\1\11\1\55\4\11\1\164"+
    "\23\11\16\0\5\11\11\0\1\11\1\55\20\11\1\165"+
    "\7\11\16\0\5\11\11\0\1\11\1\55\2\11\1\65"+
    "\25\11\16\0\5\11\11\0\1\11\1\55\11\11\1\166"+
    "\16\11\16\0\5\11\11\0\1\11\1\55\11\11\1\167"+
    "\16\11\16\0\5\11\11\0\1\11\1\55\3\11\1\170"+
    "\24\11\16\0\5\11\11\0\1\11\1\55\7\11\1\171"+
    "\1\172\17\11\16\0\5\11\11\0\1\11\1\55\14\11"+
    "\1\173\13\11\16\0\5\11\11\0\1\11\1\55\1\11"+
    "\1\174\26\11\16\0\5\11\11\0\1\11\1\55\13\11"+
    "\1\175\14\11\16\0\5\11\11\0\1\11\1\55\13\11"+
    "\1\176\14\11\16\0\5\11\11\0\1\11\1\55\10\11"+
    "\1\177\17\11\16\0\5\11\11\0\1\11\1\55\10\11"+
    "\1\200\17\11\16\0\5\11\16\0\1\121\42\0\2\117"+
    "\1\121\51\0\1\10\1\32\67\0\2\201\5\0\2\202"+
    "\17\0\1\203\1\0\2\203\1\0\1\203\5\0\2\203"+
    "\30\0\3\203\1\0\1\203\2\0\64\123\1\204\67\123"+
    "\65\126\1\205\66\126\5\52\1\206\60\52\1\132\3\0"+
    "\1\132\1\207\2\132\1\133\31\132\1\134\24\132\3\0"+
    "\62\132\1\134\3\0\4\134\1\210\31\134\1\0\13\134"+
    "\1\211\7\134\12\0\1\212\1\0\2\212\1\0\1\212"+
    "\5\0\2\212\30\0\3\212\1\0\1\212\11\0\1\11"+
    "\1\55\4\11\1\213\23\11\16\0\5\11\11\0\1\11"+
    "\1\55\24\11\1\214\3\11\16\0\5\11\11\0\1\11"+
    "\1\55\26\11\1\215\1\11\16\0\5\11\11\0\1\11"+
    "\1\55\3\11\1\65\24\11\16\0\5\11\11\0\1\11"+
    "\1\55\3\11\1\216\24\11\16\0\5\11\11\0\1\11"+
    "\1\55\7\11\1\217\20\11\16\0\5\11\11\0\1\11"+
    "\1\55\24\11\1\220\3\11\16\0\5\11\11\0\1\11"+
    "\1\55\4\11\1\221\23\11\16\0\5\11\11\0\1\11"+
    "\1\55\3\11\1\222\24\11\16\0\5\11\11\0\1\11"+
    "\1\55\13\11\1\223\14\11\16\0\5\11\11\0\1\11"+
    "\1\55\3\11\1\224\24\11\16\0\5\11\11\0\1\11"+
    "\1\55\7\11\1\217\10\11\1\225\7\11\16\0\5\11"+
    "\11\0\1\11\1\55\20\11\1\226\7\11\16\0\5\11"+
    "\11\0\1\11\1\55\13\11\1\227\14\11\16\0\5\11"+
    "\11\0\1\11\1\55\13\11\1\162\14\11\16\0\5\11"+
    "\11\0\1\11\1\55\3\11\1\230\24\11\16\0\5\11"+
    "\11\0\1\11\1\55\3\11\1\231\24\11\16\0\5\11"+
    "\11\0\1\11\1\55\3\11\1\232\24\11\16\0\5\11"+
    "\11\0\1\11\1\55\7\11\1\70\20\11\16\0\5\11"+
    "\11\0\1\11\1\55\12\11\1\65\15\11\16\0\5\11"+
    "\11\0\1\11\1\55\14\11\1\176\13\11\16\0\5\11"+
    "\11\0\1\11\1\55\12\11\1\233\1\234\14\11\16\0"+
    "\5\11\11\0\1\11\1\55\12\11\1\235\15\11\16\0"+
    "\5\11\11\0\1\11\1\55\12\11\1\156\15\11\16\0"+
    "\5\11\11\0\1\11\1\55\4\11\1\236\23\11\16\0"+
    "\5\11\11\0\1\11\1\55\14\11\1\237\13\11\16\0"+
    "\5\11\11\0\1\11\1\55\20\11\1\240\7\11\16\0"+
    "\5\11\11\0\1\11\1\55\13\11\1\241\14\11\16\0"+
    "\5\11\11\0\1\11\1\55\22\11\1\242\5\11\16\0"+
    "\5\11\11\0\1\11\1\55\5\11\1\243\22\11\16\0"+
    "\5\11\11\0\1\11\1\55\20\11\1\227\7\11\16\0"+
    "\5\11\11\0\1\11\1\55\23\11\1\65\4\11\16\0"+
    "\5\11\11\0\1\11\1\55\20\11\1\141\7\11\16\0"+
    "\5\11\11\0\1\11\1\55\6\11\1\65\21\11\16\0"+
    "\5\11\61\0\2\202\14\0\1\207\1\244\30\207\16\0"+
    "\5\207\2\0\1\134\3\0\62\134\1\211\3\0\1\211"+
    "\1\245\2\211\1\246\31\211\1\134\23\211\12\0\1\247"+
    "\1\0\2\247\1\0\1\247\5\0\2\247\30\0\3\247"+
    "\1\0\1\247\11\0\1\11\1\55\5\11\1\65\22\11"+
    "\16\0\5\11\11\0\1\11\1\55\2\11\1\250\25\11"+
    "\16\0\5\11\11\0\1\11\1\55\11\11\1\251\16\11"+
    "\16\0\5\11\11\0\1\11\1\55\2\11\1\233\25\11"+
    "\16\0\5\11\11\0\1\11\1\55\25\11\1\252\2\11"+
    "\16\0\5\11\11\0\1\11\1\55\24\11\1\253\3\11"+
    "\16\0\5\11\11\0\1\11\1\55\13\11\1\141\14\11"+
    "\16\0\5\11\11\0\1\11\1\55\4\11\1\254\23\11"+
    "\16\0\5\11\11\0\1\11\1\55\2\11\1\255\25\11"+
    "\16\0\5\11\11\0\1\11\1\55\3\11\1\256\24\11"+
    "\16\0\5\11\11\0\1\11\1\55\10\11\1\257\17\11"+
    "\16\0\5\11\11\0\1\11\1\55\2\11\1\215\25\11"+
    "\16\0\5\11\11\0\1\11\1\55\7\11\1\260\20\11"+
    "\16\0\5\11\11\0\1\11\1\55\13\11\1\215\14\11"+
    "\16\0\5\11\11\0\1\11\1\55\10\11\1\261\17\11"+
    "\16\0\5\11\11\0\1\11\1\55\12\11\1\215\15\11"+
    "\16\0\5\11\11\0\1\11\1\55\20\11\1\262\7\11"+
    "\16\0\5\11\11\0\1\11\1\55\13\11\1\263\14\11"+
    "\16\0\5\11\11\0\1\11\1\55\6\11\1\175\21\11"+
    "\16\0\5\11\11\0\1\11\1\55\3\11\1\264\24\11"+
    "\16\0\5\11\11\0\1\11\1\55\4\11\1\265\23\11"+
    "\16\0\5\11\11\0\1\11\1\55\4\11\1\266\23\11"+
    "\16\0\5\11\37\0\1\267\30\0\1\134\3\0\3\134"+
    "\1\245\1\270\30\245\1\134\1\0\13\134\1\211\5\245"+
    "\2\134\1\211\3\0\62\211\12\0\1\11\1\0\2\11"+
    "\1\0\1\11\5\0\2\11\30\0\3\11\1\0\1\11"+
    "\11\0\1\11\1\55\11\11\1\65\16\11\16\0\5\11"+
    "\11\0\1\11\1\55\6\11\1\235\21\11\16\0\5\11"+
    "\11\0\1\11\1\55\25\11\1\271\2\11\16\0\5\11"+
    "\11\0\1\11\1\55\20\11\1\272\7\11\16\0\5\11"+
    "\11\0\1\11\1\55\11\11\1\273\16\11\16\0\5\11"+
    "\11\0\1\11\1\55\15\11\1\274\12\11\16\0\5\11"+
    "\11\0\1\11\1\55\26\11\1\275\1\11\16\0\5\11"+
    "\11\0\1\11\1\55\14\11\1\175\13\11\16\0\5\11"+
    "\11\0\1\11\1\55\15\11\1\65\12\11\16\0\5\11"+
    "\11\0\1\11\1\55\11\11\1\276\16\11\16\0\5\11"+
    "\11\0\1\11\1\55\20\11\1\277\7\11\16\0\5\11"+
    "\11\0\1\11\1\55\10\11\1\300\17\11\16\0\5\11"+
    "\11\0\1\11\1\55\14\11\1\301\13\11\16\0\5\11"+
    "\11\0\1\11\1\55\13\11\1\302\14\11\16\0\5\11"+
    "\11\0\1\11\1\55\25\11\1\302\2\11\16\0\5\11"+
    "\14\0\1\303\1\0\2\303\1\0\1\303\5\0\2\303"+
    "\30\0\3\303\1\0\1\303\2\0\1\134\3\0\31\134"+
    "\1\304\30\134\7\0\1\11\1\55\3\11\1\104\24\11"+
    "\16\0\5\11\11\0\1\11\1\55\13\11\1\65\14\11"+
    "\16\0\5\11\11\0\1\11\1\55\14\11\1\157\13\11"+
    "\16\0\5\11\11\0\1\11\1\55\4\11\1\305\23\11"+
    "\16\0\5\11\11\0\1\11\1\55\3\11\1\306\24\11"+
    "\16\0\5\11\11\0\1\11\1\55\24\11\1\141\3\11"+
    "\16\0\5\11\11\0\1\11\1\55\16\11\1\65\11\11"+
    "\16\0\5\11\11\0\1\11\1\55\7\11\1\250\20\11"+
    "\16\0\5\11\11\0\1\11\1\55\13\11\1\307\14\11"+
    "\16\0\5\11\11\0\1\11\1\55\3\11\1\175\24\11"+
    "\16\0\5\11\14\0\1\310\1\0\2\310\1\0\1\310"+
    "\5\0\2\310\30\0\3\310\1\0\1\310\2\0\1\134"+
    "\3\0\4\134\1\210\1\134\1\311\1\134\2\311\1\134"+
    "\1\311\5\134\2\311\13\134\1\0\13\134\1\211\3\311"+
    "\1\134\1\311\2\134\7\0\1\11\1\55\14\11\1\302"+
    "\13\11\16\0\5\11\11\0\1\11\1\55\11\11\1\312"+
    "\16\11\16\0\5\11\11\0\1\11\1\55\3\11\1\240"+
    "\24\11\16\0\5\11\14\0\1\313\1\0\2\313\1\0"+
    "\1\313\5\0\2\313\30\0\3\313\1\0\1\313\2\0"+
    "\1\134\3\0\4\134\1\210\1\134\1\314\1\134\2\314"+
    "\1\134\1\314\5\134\2\314\13\134\1\0\13\134\1\211"+
    "\3\314\1\134\1\314\2\134\7\0\1\11\1\55\13\11"+
    "\1\315\14\11\16\0\5\11\14\0\1\207\1\0\2\207"+
    "\1\0\1\207\5\0\2\207\30\0\3\207\1\0\1\207"+
    "\2\0\1\134\3\0\4\134\1\210\1\134\1\316\1\134"+
    "\2\316\1\134\1\316\5\134\2\316\13\134\1\0\13\134"+
    "\1\211\3\316\1\134\1\316\2\134\7\0\1\11\1\55"+
    "\12\11\1\175\15\11\16\0\5\11\2\0\1\134\3\0"+
    "\4\134\1\210\1\134\1\245\1\134\2\245\1\134\1\245"+
    "\5\134\2\245\13\134\1\0\13\134\1\211\3\245\1\134"+
    "\1\245\2\134";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10206];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\25\1\1\11\10\1\1\11\6\1\2\0"+
    "\1\11\2\0\42\1\4\0\1\1\2\0\1\1\5\0"+
    "\43\1\1\0\4\1\1\11\1\1\3\0\31\1\1\0"+
    "\1\1\2\0\17\1\2\0\12\1\2\0\3\1\2\0"+
    "\1\1\2\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  JsFlexToken next() throws java.io.IOException, JsParseException {
    return nextToken();
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JsTokenizer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  JsTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2022) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) throws JsParseException {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new JsParseException(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  throws JsParseException {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private JsFlexToken nextToken() throws java.io.IOException, JsParseException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { yybegin(YYINITIAL);
                                  return new JsFlexToken(yytext().intern(), 
                                          JsFlexToken.RESERVED | JsFlexToken.RESERVED_KEYWORD, yyline, yycolumn);
          }
        case 17: break;
        case 1: 
          { /*Error fallback: matches any input*/
  yybegin(YYINITIAL);
  return new JsFlexToken(yytext(), JsFlexToken.ERROR, yyline, yycolumn);
          }
        case 18: break;
        case 7: 
          { yybegin(DIV_ONLY);
                                  return new JsFlexToken(yytext().intern(), JsFlexToken.PUNKTUATOR | 
                                          JsFlexToken.ANY_PUNKTUATOR, yyline, yycolumn);
          }
        case 19: break;
        case 12: 
          { yybegin(YYINITIAL);
                                  return new JsFlexToken(yytext().intern(), 
                                          JsFlexToken.RESERVED | JsFlexToken.FUTURE_RESERVED_STRICT, yyline, yycolumn);
          }
        case 20: break;
        case 5: 
          { yybegin(YYINITIAL);
                                  return new JsFlexToken(yytext().intern(), JsFlexToken.PUNKTUATOR | 
                                          JsFlexToken.ANY_PUNKTUATOR, yyline, yycolumn);
          }
        case 21: break;
        case 16: 
          { yybegin(DIV_ONLY);
                                  return new JsFlexToken(yytext().intern(), 
                                          JsFlexToken.RESERVED | JsFlexToken.RESERVED_KEYWORD |
                                          JsFlexToken.LITERAL | JsFlexToken.BOOLEAN_LITERAL, yyline, yycolumn);
          }
        case 22: break;
        case 15: 
          { yybegin(DIV_ONLY);
                                  return new JsFlexToken(yytext().intern(), JsFlexToken.RESERVED | 
                                          JsFlexToken.RESERVED_KEYWORD | JsFlexToken.LITERAL | 
                                          JsFlexToken.NULL_LITERAL, yyline, yycolumn);
          }
        case 23: break;
        case 14: 
          { yybegin(YYINITIAL);
                                  return new JsFlexToken(yytext().intern(), 
                                          JsFlexToken.RESERVED | JsFlexToken.FUTURE_RESERVED, yyline, yycolumn);
          }
        case 24: break;
        case 11: 
          { yybegin(DIV_ONLY);
                                  return new JsFlexToken(yytext(), JsFlexToken.LITERAL | 
                                          JsFlexToken.STRING_LITERAL, yyline, yycolumn);
          }
        case 25: break;
        case 6: 
          { yybegin(DIV_ONLY);
                                  return new JsFlexToken(yytext(), JsFlexToken.IDENTIFIER, yyline, yycolumn);
          }
        case 26: break;
        case 9: 
          { return new JsFlexToken(yytext(), JsFlexToken.COMMENT, yyline, yycolumn);
          }
        case 27: break;
        case 2: 
          { return new JsFlexToken(JsFlexToken.TOKEN_LINE_TERMINATOR, JsFlexToken.LINE_TERMINATOR, yyline, yycolumn);
          }
        case 28: break;
        case 13: 
          { yybegin(DIV_ONLY);
                                  return new JsFlexToken(yytext(), JsFlexToken.LITERAL | 
                                          JsFlexToken.REGEXP_LITERAL, yyline, yycolumn);
          }
        case 29: break;
        case 3: 
          { return new JsFlexToken(JsFlexToken.TOKEN_WHITE_SPACE, JsFlexToken.WHITE_SPACE, yyline, yycolumn);
          }
        case 30: break;
        case 8: 
          { yybegin(DIV_ONLY);
                                  return new JsFlexToken(yytext(), JsFlexToken.LITERAL | 
                                          JsFlexToken.NUMERIC_LITERAL, yyline, yycolumn);
          }
        case 31: break;
        case 4: 
          { yybegin(YYINITIAL);
                                  return new JsFlexToken(yytext().intern(), JsFlexToken.DIV_PUNKTUATOR | 
                                          JsFlexToken.ANY_PUNKTUATOR, yyline, yycolumn);
          }
        case 32: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
