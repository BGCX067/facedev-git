/* The following code was generated by JFlex 1.4.3 on 08.04.13 19:32 */

package com.facedev.js.parser.internal;

import com.facedev.js.parser.JsParseException;
import com.facedev.js.parser.JsKeywords;


@SuppressWarnings("unused")

/**
 * This class is a scanner generated by JFlex.
 * Provides fast DFA-based scanner for javascript source.
 */

final class JsTokenizer {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\3\2\4\1\2\22\0\1\4\1\47\1\62\1\0"+
    "\1\7\1\52\1\53\1\63\1\41\1\41\1\6\1\50\1\41\1\51"+
    "\1\43\1\5\1\55\11\56\1\41\1\41\1\44\1\46\1\45\1\41"+
    "\1\0\4\61\1\57\1\61\21\7\1\60\2\7\1\42\1\10\1\41"+
    "\1\52\1\7\1\0\1\15\1\12\1\25\1\17\1\14\1\26\1\36"+
    "\1\34\1\21\1\7\1\16\1\31\1\37\1\22\1\20\1\30\1\7"+
    "\1\13\1\23\1\24\1\35\1\33\1\32\1\40\1\27\1\7\1\41"+
    "\1\54\1\41\1\41\41\0\1\4\11\0\1\7\12\0\1\7\4\0"+
    "\1\7\5\0\27\7\1\0\37\7\1\0\u013f\7\31\0\162\7\4\0"+
    "\14\7\16\0\5\7\11\0\1\7\21\0\160\11\12\0\1\7\13\0"+
    "\1\7\1\0\3\7\1\0\1\7\1\0\24\7\1\0\54\7\1\0"+
    "\46\7\1\0\5\7\4\0\202\7\1\0\5\11\2\0\105\7\1\0"+
    "\46\7\2\0\2\7\6\0\20\7\41\0\46\7\2\0\1\7\7\0"+
    "\47\7\11\0\55\11\1\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\1\11\10\0\33\7\5\0\3\7\35\0\13\11\6\0\32\7\5\0"+
    "\13\7\37\11\4\0\2\7\1\11\143\7\1\0\1\7\7\11\2\0"+
    "\6\11\2\7\2\11\1\0\4\11\2\7\12\11\3\7\2\0\1\7"+
    "\20\0\1\7\1\11\36\7\33\11\2\0\3\7\60\0\46\7\13\11"+
    "\1\7\16\0\12\11\41\0\11\11\42\0\4\11\1\0\11\11\1\0"+
    "\3\11\1\0\5\11\53\0\3\11\210\0\33\11\1\0\4\11\66\7"+
    "\3\11\1\7\22\11\1\7\7\11\12\7\2\11\2\0\12\11\21\0"+
    "\3\11\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0"+
    "\1\7\3\0\4\7\2\0\1\11\1\7\7\11\2\0\2\11\2\0"+
    "\3\11\11\0\1\11\4\0\2\7\1\0\3\7\2\11\2\0\12\11"+
    "\2\7\17\0\3\11\1\0\6\7\4\0\2\7\2\0\26\7\1\0"+
    "\7\7\1\0\2\7\1\0\2\7\1\0\2\7\2\0\1\11\1\0"+
    "\5\11\4\0\2\11\2\0\3\11\3\0\1\11\7\0\4\7\1\0"+
    "\1\7\7\0\14\11\3\7\1\11\13\0\3\11\1\0\11\7\1\0"+
    "\3\7\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0"+
    "\1\11\1\7\10\11\1\0\3\11\1\0\3\11\2\0\1\7\17\0"+
    "\2\7\2\11\2\0\12\11\21\0\3\11\1\0\10\7\2\0\2\7"+
    "\2\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\11"+
    "\1\7\7\11\2\0\2\11\2\0\3\11\10\0\2\11\4\0\2\7"+
    "\1\0\3\7\2\11\2\0\12\11\1\0\1\7\20\0\1\11\1\7"+
    "\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\3\0\3\7\3\0\10\7\1\0\3\7"+
    "\4\0\5\11\3\0\3\11\1\0\4\11\11\0\1\11\16\0\12\11"+
    "\21\0\3\11\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7"+
    "\1\0\5\7\4\0\7\11\1\0\3\11\1\0\4\11\7\0\2\11"+
    "\11\0\2\7\2\11\2\0\12\11\22\0\2\11\1\0\10\7\1\0"+
    "\3\7\1\0\27\7\1\0\12\7\1\0\5\7\2\0\1\11\1\7"+
    "\7\11\1\0\3\11\1\0\4\11\7\0\2\11\7\0\1\7\1\0"+
    "\2\7\2\11\2\0\12\11\22\0\2\11\1\0\10\7\1\0\3\7"+
    "\1\0\27\7\1\0\20\7\4\0\7\11\1\0\3\11\1\0\4\11"+
    "\11\0\1\11\10\0\2\7\2\11\2\0\12\11\22\0\2\11\1\0"+
    "\22\7\3\0\30\7\1\0\11\7\1\0\1\7\2\0\7\7\3\0"+
    "\1\11\4\0\6\11\1\0\1\11\1\0\10\11\22\0\2\11\15\0"+
    "\60\7\1\11\2\7\7\11\5\0\7\7\10\11\1\0\12\11\47\0"+
    "\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0"+
    "\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0"+
    "\2\7\1\0\4\7\1\11\2\7\6\11\1\0\2\11\1\7\2\0"+
    "\5\7\1\0\1\7\1\0\6\11\2\0\12\11\2\0\2\7\42\0"+
    "\1\7\27\0\2\11\6\0\12\11\13\0\1\11\1\0\1\11\1\0"+
    "\1\11\4\0\2\11\10\7\1\0\42\7\6\0\24\11\1\0\2\11"+
    "\4\7\1\0\13\11\1\0\44\11\11\0\1\11\71\0\42\7\1\0"+
    "\5\7\1\0\2\7\24\11\1\0\12\11\6\0\6\7\4\11\4\0"+
    "\3\11\1\0\3\11\2\0\7\11\3\0\4\11\15\0\14\11\1\0"+
    "\17\11\2\0\46\7\12\0\51\7\7\0\132\7\5\0\104\7\5\0"+
    "\122\7\6\0\7\7\1\0\77\7\1\0\1\7\1\0\4\7\2\0"+
    "\7\7\1\0\1\7\1\0\4\7\2\0\47\7\1\0\1\7\1\0"+
    "\4\7\2\0\37\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0"+
    "\1\7\1\0\4\7\2\0\7\7\1\0\7\7\1\0\27\7\1\0"+
    "\37\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0\47\7\1\0"+
    "\23\7\2\0\3\11\100\0\125\7\14\0\u026c\7\2\0\10\7\11\0"+
    "\1\4\32\7\5\0\113\7\25\0\15\7\1\0\4\7\3\11\13\0"+
    "\22\7\3\11\13\0\22\7\2\11\14\0\15\7\1\0\3\7\1\0"+
    "\2\11\14\0\64\7\40\11\3\0\1\7\4\0\1\7\1\11\2\0"+
    "\12\11\41\0\3\11\1\4\1\0\12\11\6\0\130\7\10\0\51\7"+
    "\1\11\126\0\35\7\3\0\14\11\4\0\14\11\12\0\12\11\36\7"+
    "\2\0\5\7\73\0\21\11\7\0\2\11\6\0\12\11\75\0\5\11"+
    "\71\0\12\11\1\0\35\11\2\0\13\11\6\0\12\11\146\0\5\11"+
    "\57\0\21\11\13\0\12\11\21\0\11\11\14\0\3\11\36\0\15\11"+
    "\2\0\12\11\54\0\16\11\60\0\24\11\10\0\12\11\6\0\12\11"+
    "\166\0\3\11\1\0\25\11\4\0\1\11\4\0\3\11\13\0\154\7"+
    "\124\0\47\11\25\0\4\11\234\7\4\0\132\7\6\0\26\7\2\0"+
    "\6\7\2\0\46\7\2\0\6\7\2\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\37\7\2\0\65\7\1\0\7\7\1\0"+
    "\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0"+
    "\15\7\5\0\3\7\1\0\7\7\3\0\13\4\1\0\2\11\32\0"+
    "\2\1\5\0\1\4\17\0\2\11\23\0\1\11\12\0\1\4\21\0"+
    "\1\7\15\0\1\7\120\0\15\11\4\0\1\11\3\0\14\11\21\0"+
    "\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0\3\7\1\0"+
    "\7\7\3\0\3\7\5\0\5\7\u0ba5\0\3\11\215\0\1\11\140\0"+
    "\40\11\u0200\0\1\4\4\0\2\7\43\0\6\11\1\0\5\7\5\0"+
    "\2\7\4\0\126\7\2\0\2\11\2\0\3\7\1\0\132\7\1\0"+
    "\4\7\5\0\50\7\4\0\136\7\21\0\30\7\70\0\20\7\u0200\0"+
    "\u19b6\7\112\0\u51a6\7\132\0\u048d\7\u0193\0\12\11\105\0\1\11\4\0"+
    "\12\11\41\0\1\11\120\0\1\11\1\11\u0110\0\1\11\3\0\1\11"+
    "\4\0\1\11\27\0\5\11\130\0\2\11\62\0\21\11\13\0\12\11"+
    "\6\0\22\11\16\0\12\11\34\0\10\11\31\0\15\11\54\0\4\11"+
    "\57\0\16\11\17\0\12\11\117\0\16\11\14\0\1\11\10\0\2\11"+
    "\2\0\12\11\41\0\1\11\64\0\1\11\1\0\3\11\2\0\2\11"+
    "\5\0\2\11\1\0\1\11\51\0\5\11\5\0\2\11\354\0\10\11"+
    "\1\0\2\11\2\0\12\11\6\0\u2ba4\7\u215c\0\u012e\7\2\0\73\7"+
    "\225\0\7\7\14\0\5\7\5\0\1\7\1\11\12\7\1\0\15\7"+
    "\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\154\7"+
    "\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0\14\7\4\0\20\11"+
    "\20\0\7\11\14\0\2\11\30\0\3\11\40\0\5\7\1\0\207\7"+
    "\2\0\1\4\20\0\12\11\7\0\32\7\4\0\1\11\1\0\32\7"+
    "\13\0\131\7\3\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\1"+
    "\17\6\11\5\2\7\2\1\2\0\1\10\1\0\1\4"+
    "\2\0\6\6\2\11\30\6\1\7\1\5\4\0\1\12"+
    "\2\0\1\12\1\0\1\10\4\0\37\6\1\13\3\6"+
    "\1\0\2\7\2\12\1\14\1\0\1\14\1\0\1\10"+
    "\1\0\2\6\1\15\10\6\1\16\2\6\1\17\12\6"+
    "\3\0\17\6\2\0\12\6\2\0\3\6\2\0\2\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\64\0\150\0\234\0\320\0\u0104\0\u0138"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\64\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4"+
    "\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784"+
    "\0\u07b8\0\u071c\0\u016c\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc"+
    "\0\u08f0\0\u0924\0\u0138\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28"+
    "\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8"+
    "\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68"+
    "\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08"+
    "\0\u0f3c\0\u0f70\0\u0f70\0\u0fa4\0\u0fd8\0\u0fd8\0\u100c\0\u1040"+
    "\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac"+
    "\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c"+
    "\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec"+
    "\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c"+
    "\0\u16c0\0\u16f4\0\u1728\0\u0138\0\u175c\0\u1790\0\u17c4\0\u17f8"+
    "\0\u17f8\0\u0f08\0\u0f3c\0\u0fa4\0\u071c\0\u182c\0\u07b8\0\u1860"+
    "\0\u100c\0\u1894\0\u18c8\0\u18fc\0\u0138\0\u1930\0\u1964\0\u1998"+
    "\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u0138\0\u1ad0\0\u1b04"+
    "\0\u0138\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70"+
    "\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10"+
    "\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0"+
    "\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150"+
    "\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0"+
    "\0\u2324\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490"+
    "\0\u24c4\0\u24f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\2\10\1\15\1\10"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\5\10\2\31\1\32\1\33\1\34"+
    "\2\35\1\36\1\37\1\7\1\40\1\41\1\42\1\43"+
    "\3\10\1\44\1\45\67\0\1\3\64\0\1\5\57\0"+
    "\1\46\3\47\1\46\1\50\1\51\33\46\1\47\3\46"+
    "\1\52\15\46\46\0\1\31\24\0\1\10\1\53\30\10"+
    "\14\0\5\10\37\0\1\54\35\0\1\10\1\53\2\10"+
    "\1\55\25\10\14\0\5\10\11\0\1\10\1\53\3\10"+
    "\1\56\24\10\14\0\5\10\11\0\1\10\1\53\11\10"+
    "\1\57\6\10\1\60\6\10\1\61\14\0\5\10\11\0"+
    "\1\10\1\53\3\10\1\62\3\10\1\63\20\10\14\0"+
    "\5\10\11\0\1\10\1\53\11\10\1\64\3\10\1\63"+
    "\10\10\1\65\1\10\14\0\5\10\11\0\1\10\1\53"+
    "\3\10\1\66\20\10\1\67\3\10\14\0\5\10\11\0"+
    "\1\10\1\53\13\10\1\70\5\10\1\71\2\10\1\72"+
    "\3\10\14\0\5\10\11\0\1\10\1\53\2\10\1\73"+
    "\13\10\1\74\4\10\1\75\4\10\14\0\5\10\11\0"+
    "\1\10\1\53\4\10\1\76\2\10\1\77\10\10\1\100"+
    "\7\10\14\0\5\10\11\0\1\10\1\53\4\10\1\101"+
    "\2\10\1\102\1\103\13\10\1\104\3\10\14\0\5\10"+
    "\11\0\1\10\1\53\10\10\1\105\17\10\14\0\5\10"+
    "\11\0\1\10\1\53\2\10\1\106\1\10\1\107\17\10"+
    "\1\110\3\10\14\0\5\10\11\0\1\10\1\53\3\10"+
    "\1\111\24\10\14\0\5\10\11\0\1\10\1\53\10\10"+
    "\1\112\12\10\1\113\4\10\14\0\5\10\11\0\1\10"+
    "\1\53\4\10\1\102\2\10\1\114\20\10\14\0\5\10"+
    "\57\0\2\115\51\0\1\7\1\0\1\31\62\0\1\116"+
    "\1\31\63\0\1\7\63\0\1\31\1\0\1\31\61\0"+
    "\1\31\2\0\1\31\60\0\1\31\4\0\1\31\56\0"+
    "\1\31\5\0\1\31\23\0\1\117\23\0\1\120\2\0"+
    "\1\115\13\0\1\117\1\120\17\0\1\117\26\0\1\115"+
    "\11\0\2\43\1\117\4\0\1\121\3\122\56\121\1\123"+
    "\1\121\1\124\3\125\57\124\1\126\5\46\1\127\142\46"+
    "\1\130\3\131\60\130\5\51\1\132\1\133\55\51\12\0"+
    "\1\134\1\0\2\134\1\0\1\134\5\0\2\134\26\0"+
    "\3\134\1\0\1\134\11\0\1\10\1\53\3\10\1\135"+
    "\24\10\14\0\5\10\11\0\1\10\1\53\13\10\1\136"+
    "\14\10\14\0\5\10\11\0\1\10\1\53\24\10\1\137"+
    "\3\10\14\0\5\10\11\0\1\10\1\53\12\10\1\140"+
    "\15\10\14\0\5\10\11\0\1\10\1\53\13\10\1\141"+
    "\3\10\1\142\10\10\14\0\5\10\11\0\1\10\1\53"+
    "\1\10\1\143\13\10\1\144\2\10\1\145\7\10\14\0"+
    "\5\10\11\0\1\10\1\53\12\10\1\146\1\147\14\10"+
    "\14\0\5\10\11\0\1\10\1\53\17\10\1\150\10\10"+
    "\14\0\5\10\11\0\1\10\1\53\21\10\1\63\6\10"+
    "\14\0\5\10\11\0\1\10\1\53\20\10\1\151\7\10"+
    "\14\0\5\10\11\0\1\10\1\53\4\10\1\152\23\10"+
    "\14\0\5\10\11\0\1\10\1\53\10\10\1\153\17\10"+
    "\14\0\5\10\11\0\1\10\1\53\17\10\1\154\10\10"+
    "\14\0\5\10\11\0\1\10\1\53\16\10\1\63\5\10"+
    "\1\155\3\10\14\0\5\10\11\0\1\10\1\53\17\10"+
    "\1\156\10\10\14\0\5\10\11\0\1\10\1\53\2\10"+
    "\1\157\5\10\1\160\17\10\14\0\5\10\11\0\1\10"+
    "\1\53\12\10\1\140\1\161\14\10\14\0\5\10\11\0"+
    "\1\10\1\53\11\10\1\162\16\10\14\0\5\10\11\0"+
    "\1\10\1\53\4\10\1\163\23\10\14\0\5\10\11\0"+
    "\1\10\1\53\20\10\1\164\7\10\14\0\5\10\11\0"+
    "\1\10\1\53\2\10\1\63\25\10\14\0\5\10\11\0"+
    "\1\10\1\53\11\10\1\165\16\10\14\0\5\10\11\0"+
    "\1\10\1\53\11\10\1\166\16\10\14\0\5\10\11\0"+
    "\1\10\1\53\3\10\1\167\24\10\14\0\5\10\11\0"+
    "\1\10\1\53\7\10\1\170\1\171\17\10\14\0\5\10"+
    "\11\0\1\10\1\53\14\10\1\172\13\10\14\0\5\10"+
    "\11\0\1\10\1\53\1\10\1\173\26\10\14\0\5\10"+
    "\11\0\1\10\1\53\13\10\1\174\14\10\14\0\5\10"+
    "\11\0\1\10\1\53\13\10\1\175\14\10\14\0\5\10"+
    "\11\0\1\10\1\53\10\10\1\176\17\10\14\0\5\10"+
    "\11\0\1\10\1\53\10\10\1\177\17\10\14\0\5\10"+
    "\16\0\1\117\40\0\2\115\1\117\51\0\1\7\1\31"+
    "\65\0\2\200\3\0\2\201\17\0\1\202\1\0\2\202"+
    "\1\0\1\202\5\0\2\202\26\0\3\202\1\0\1\202"+
    "\2\0\62\121\1\203\65\121\63\124\1\204\64\124\5\46"+
    "\1\127\1\46\1\205\1\206\30\205\14\46\5\205\2\46"+
    "\64\130\5\51\1\132\1\133\1\207\1\210\30\207\14\51"+
    "\5\207\7\51\1\211\56\51\12\0\1\212\1\0\2\212"+
    "\1\0\1\212\5\0\2\212\26\0\3\212\1\0\1\212"+
    "\11\0\1\10\1\53\4\10\1\213\23\10\14\0\5\10"+
    "\11\0\1\10\1\53\24\10\1\214\3\10\14\0\5\10"+
    "\11\0\1\10\1\53\26\10\1\215\1\10\14\0\5\10"+
    "\11\0\1\10\1\53\3\10\1\63\24\10\14\0\5\10"+
    "\11\0\1\10\1\53\3\10\1\216\24\10\14\0\5\10"+
    "\11\0\1\10\1\53\7\10\1\217\20\10\14\0\5\10"+
    "\11\0\1\10\1\53\24\10\1\220\3\10\14\0\5\10"+
    "\11\0\1\10\1\53\4\10\1\221\23\10\14\0\5\10"+
    "\11\0\1\10\1\53\3\10\1\222\24\10\14\0\5\10"+
    "\11\0\1\10\1\53\13\10\1\223\14\10\14\0\5\10"+
    "\11\0\1\10\1\53\3\10\1\224\24\10\14\0\5\10"+
    "\11\0\1\10\1\53\7\10\1\217\10\10\1\225\7\10"+
    "\14\0\5\10\11\0\1\10\1\53\20\10\1\226\7\10"+
    "\14\0\5\10\11\0\1\10\1\53\13\10\1\227\14\10"+
    "\14\0\5\10\11\0\1\10\1\53\13\10\1\161\14\10"+
    "\14\0\5\10\11\0\1\10\1\53\3\10\1\230\24\10"+
    "\14\0\5\10\11\0\1\10\1\53\3\10\1\231\24\10"+
    "\14\0\5\10\11\0\1\10\1\53\3\10\1\232\24\10"+
    "\14\0\5\10\11\0\1\10\1\53\7\10\1\66\20\10"+
    "\14\0\5\10\11\0\1\10\1\53\12\10\1\63\15\10"+
    "\14\0\5\10\11\0\1\10\1\53\14\10\1\175\13\10"+
    "\14\0\5\10\11\0\1\10\1\53\12\10\1\233\1\234"+
    "\14\10\14\0\5\10\11\0\1\10\1\53\12\10\1\235"+
    "\15\10\14\0\5\10\11\0\1\10\1\53\12\10\1\155"+
    "\15\10\14\0\5\10\11\0\1\10\1\53\4\10\1\236"+
    "\23\10\14\0\5\10\11\0\1\10\1\53\14\10\1\237"+
    "\13\10\14\0\5\10\11\0\1\10\1\53\20\10\1\240"+
    "\7\10\14\0\5\10\11\0\1\10\1\53\13\10\1\241"+
    "\14\10\14\0\5\10\11\0\1\10\1\53\22\10\1\242"+
    "\5\10\14\0\5\10\11\0\1\10\1\53\5\10\1\243"+
    "\22\10\14\0\5\10\11\0\1\10\1\53\20\10\1\227"+
    "\7\10\14\0\5\10\11\0\1\10\1\53\23\10\1\63"+
    "\4\10\14\0\5\10\11\0\1\10\1\53\20\10\1\140"+
    "\7\10\14\0\5\10\11\0\1\10\1\53\6\10\1\63"+
    "\21\10\14\0\5\10\57\0\2\201\5\0\5\46\1\127"+
    "\27\46\1\244\26\46\5\51\1\132\1\133\26\51\1\245"+
    "\26\51\12\0\1\246\1\0\2\246\1\0\1\246\5\0"+
    "\2\246\26\0\3\246\1\0\1\246\11\0\1\10\1\53"+
    "\5\10\1\63\22\10\14\0\5\10\11\0\1\10\1\53"+
    "\2\10\1\247\25\10\14\0\5\10\11\0\1\10\1\53"+
    "\11\10\1\250\16\10\14\0\5\10\11\0\1\10\1\53"+
    "\2\10\1\233\25\10\14\0\5\10\11\0\1\10\1\53"+
    "\25\10\1\251\2\10\14\0\5\10\11\0\1\10\1\53"+
    "\24\10\1\252\3\10\14\0\5\10\11\0\1\10\1\53"+
    "\13\10\1\140\14\10\14\0\5\10\11\0\1\10\1\53"+
    "\4\10\1\253\23\10\14\0\5\10\11\0\1\10\1\53"+
    "\2\10\1\254\25\10\14\0\5\10\11\0\1\10\1\53"+
    "\3\10\1\255\24\10\14\0\5\10\11\0\1\10\1\53"+
    "\10\10\1\256\17\10\14\0\5\10\11\0\1\10\1\53"+
    "\2\10\1\215\25\10\14\0\5\10\11\0\1\10\1\53"+
    "\7\10\1\257\20\10\14\0\5\10\11\0\1\10\1\53"+
    "\13\10\1\215\14\10\14\0\5\10\11\0\1\10\1\53"+
    "\10\10\1\260\17\10\14\0\5\10\11\0\1\10\1\53"+
    "\12\10\1\215\15\10\14\0\5\10\11\0\1\10\1\53"+
    "\20\10\1\261\7\10\14\0\5\10\11\0\1\10\1\53"+
    "\13\10\1\262\14\10\14\0\5\10\11\0\1\10\1\53"+
    "\6\10\1\174\21\10\14\0\5\10\11\0\1\10\1\53"+
    "\3\10\1\263\24\10\14\0\5\10\11\0\1\10\1\53"+
    "\4\10\1\264\23\10\14\0\5\10\11\0\1\10\1\53"+
    "\4\10\1\265\23\10\14\0\5\10\2\0\5\46\1\127"+
    "\4\46\1\266\1\46\2\266\1\46\1\266\5\46\2\266"+
    "\26\46\3\266\1\46\1\266\2\46\5\51\1\132\1\133"+
    "\3\51\1\267\1\51\2\267\1\51\1\267\5\51\2\267"+
    "\26\51\3\267\1\51\1\267\2\51\12\0\1\10\1\0"+
    "\2\10\1\0\1\10\5\0\2\10\26\0\3\10\1\0"+
    "\1\10\11\0\1\10\1\53\11\10\1\63\16\10\14\0"+
    "\5\10\11\0\1\10\1\53\6\10\1\235\21\10\14\0"+
    "\5\10\11\0\1\10\1\53\25\10\1\270\2\10\14\0"+
    "\5\10\11\0\1\10\1\53\20\10\1\271\7\10\14\0"+
    "\5\10\11\0\1\10\1\53\11\10\1\272\16\10\14\0"+
    "\5\10\11\0\1\10\1\53\15\10\1\273\12\10\14\0"+
    "\5\10\11\0\1\10\1\53\26\10\1\274\1\10\14\0"+
    "\5\10\11\0\1\10\1\53\14\10\1\174\13\10\14\0"+
    "\5\10\11\0\1\10\1\53\15\10\1\63\12\10\14\0"+
    "\5\10\11\0\1\10\1\53\11\10\1\275\16\10\14\0"+
    "\5\10\11\0\1\10\1\53\20\10\1\276\7\10\14\0"+
    "\5\10\11\0\1\10\1\53\10\10\1\277\17\10\14\0"+
    "\5\10\11\0\1\10\1\53\14\10\1\300\13\10\14\0"+
    "\5\10\11\0\1\10\1\53\13\10\1\301\14\10\14\0"+
    "\5\10\11\0\1\10\1\53\25\10\1\301\2\10\14\0"+
    "\5\10\2\0\5\46\1\127\4\46\1\302\1\46\2\302"+
    "\1\46\1\302\5\46\2\302\26\46\3\302\1\46\1\302"+
    "\2\46\5\51\1\132\1\133\3\51\1\303\1\51\2\303"+
    "\1\51\1\303\5\51\2\303\26\51\3\303\1\51\1\303"+
    "\2\51\7\0\1\10\1\53\3\10\1\102\24\10\14\0"+
    "\5\10\11\0\1\10\1\53\13\10\1\63\14\10\14\0"+
    "\5\10\11\0\1\10\1\53\14\10\1\156\13\10\14\0"+
    "\5\10\11\0\1\10\1\53\4\10\1\304\23\10\14\0"+
    "\5\10\11\0\1\10\1\53\3\10\1\305\24\10\14\0"+
    "\5\10\11\0\1\10\1\53\24\10\1\140\3\10\14\0"+
    "\5\10\11\0\1\10\1\53\16\10\1\63\11\10\14\0"+
    "\5\10\11\0\1\10\1\53\7\10\1\247\20\10\14\0"+
    "\5\10\11\0\1\10\1\53\13\10\1\306\14\10\14\0"+
    "\5\10\11\0\1\10\1\53\3\10\1\174\24\10\14\0"+
    "\5\10\2\0\5\46\1\127\4\46\1\307\1\46\2\307"+
    "\1\46\1\307\5\46\2\307\26\46\3\307\1\46\1\307"+
    "\2\46\5\51\1\132\1\133\3\51\1\310\1\51\2\310"+
    "\1\51\1\310\5\51\2\310\26\51\3\310\1\51\1\310"+
    "\2\51\7\0\1\10\1\53\14\10\1\301\13\10\14\0"+
    "\5\10\11\0\1\10\1\53\11\10\1\311\16\10\14\0"+
    "\5\10\11\0\1\10\1\53\3\10\1\240\24\10\14\0"+
    "\5\10\2\0\5\46\1\127\4\46\1\205\1\46\2\205"+
    "\1\46\1\205\5\46\2\205\26\46\3\205\1\46\1\205"+
    "\2\46\5\51\1\132\1\133\3\51\1\207\1\51\2\207"+
    "\1\51\1\207\5\51\2\207\26\51\3\207\1\51\1\207"+
    "\2\51\7\0\1\10\1\53\13\10\1\312\14\10\14\0"+
    "\5\10\11\0\1\10\1\53\12\10\1\174\15\10\14\0"+
    "\5\10\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9516];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\25\1\1\11\14\1\2\0\1\1\1\0"+
    "\1\1\2\0\42\1\4\0\1\1\2\0\1\1\1\0"+
    "\1\1\4\0\43\1\1\0\5\1\1\0\1\1\1\0"+
    "\1\1\1\0\31\1\3\0\17\1\2\0\12\1\2\0"+
    "\3\1\2\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  JsFlexToken next() throws java.io.IOException, JsParseException {
    return nextToken();
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JsTokenizer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  JsTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2022) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) throws JsParseException {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new JsParseException(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  throws JsParseException {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private JsFlexToken nextToken() throws java.io.IOException, JsParseException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13: 
          { return new JsFlexToken(yytext().intern(), JsFlexToken.RESERVED | JsFlexToken.FUTURE_RESERVED, yyline, yycolumn);
          }
        case 16: break;
        case 10: 
          { return new JsFlexToken(yytext(), JsFlexToken.LITERAL | JsFlexToken.STRING_LITERAL, yyline, yycolumn);
          }
        case 17: break;
        case 15: 
          { return new JsFlexToken(yytext().intern(), JsFlexToken.RESERVED | JsFlexToken.RESERVED_KEYWORD |
                                                                          JsFlexToken.LITERAL | JsFlexToken.BOOLEAN_LITERAL, yyline, yycolumn);
          }
        case 18: break;
        case 4: 
          { return new JsFlexToken(yytext().intern(), JsFlexToken.DIV_PUNKTUATOR | JsFlexToken.ANY_PUNKTUATOR, yyline, yycolumn);
          }
        case 19: break;
        case 6: 
          { return new JsFlexToken(yytext(), JsFlexToken.IDENTIFIER, yyline, yycolumn);
          }
        case 20: break;
        case 5: 
          { return new JsFlexToken(yytext().intern(), JsFlexToken.PUNKTUATOR | JsFlexToken.ANY_PUNKTUATOR, yyline, yycolumn);
          }
        case 21: break;
        case 12: 
          { return new JsFlexToken(yytext(), JsFlexToken.LITERAL | JsFlexToken.REGEXP_LITERAL, yyline, yycolumn);
          }
        case 22: break;
        case 8: 
          { return new JsFlexToken(yytext(), JsFlexToken.COMMENT, yyline, yycolumn);
          }
        case 23: break;
        case 11: 
          { return new JsFlexToken(yytext().intern(), JsFlexToken.RESERVED | JsFlexToken.FUTURE_RESERVED_STRICT, yyline, yycolumn);
          }
        case 24: break;
        case 9: 
          { return new JsFlexToken(yytext().intern(), JsFlexToken.RESERVED | JsFlexToken.RESERVED_KEYWORD, yyline, yycolumn);
          }
        case 25: break;
        case 2: 
          { return new JsFlexToken(JsFlexToken.TOKEN_LINE_TERMINATOR, JsFlexToken.LINE_TERMINATOR, yyline, yycolumn);
          }
        case 26: break;
        case 1: 
          { /*Error fallback: matches any input*/
  return new JsFlexToken(yytext(), JsFlexToken.ERROR, yyline, yycolumn);
          }
        case 27: break;
        case 14: 
          { return new JsFlexToken(yytext().intern(), JsFlexToken.RESERVED | JsFlexToken.RESERVED_KEYWORD | 
                                                                          JsFlexToken.LITERAL | JsFlexToken.NULL_LITERAL, yyline, yycolumn);
          }
        case 28: break;
        case 3: 
          { return new JsFlexToken(JsFlexToken.TOKEN_WHITE_SPACE, JsFlexToken.WHITE_SPACE, yyline, yycolumn);
          }
        case 29: break;
        case 7: 
          { return new JsFlexToken(yytext(), JsFlexToken.LITERAL | JsFlexToken.NUMERIC_LITERAL, yyline, yycolumn);
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
